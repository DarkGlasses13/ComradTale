//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Resources/ControlsEditor.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Scripts
{
    public partial class @Controls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Controls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlsEditor"",
    ""maps"": [
        {
            ""name"": ""Test"",
            ""id"": ""60cc16b5-d25c-4a82-9089-78bf4be44560"",
            ""actions"": [
                {
                    ""name"": ""ButtonTest"",
                    ""type"": ""Button"",
                    ""id"": ""d0d633ea-4852-4e5b-891c-ab926aac1dc4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JoystickTest"",
                    ""type"": ""Value"",
                    ""id"": ""6b14f57f-39e0-46d6-8dcf-185cd0d686dc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Joystick2"",
                    ""type"": ""Value"",
                    ""id"": ""c9264d98-7b01-4a14-8c83-b29632d3847c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c958456c-46be-4d21-901d-cb855125d47e"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ButtonTest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6216bab-f622-481a-84cb-2ebce738abd5"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JoystickTest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f4ba525-f2ae-4cb6-99a9-a890451c340f"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Test
            m_Test = asset.FindActionMap("Test", throwIfNotFound: true);
            m_Test_ButtonTest = m_Test.FindAction("ButtonTest", throwIfNotFound: true);
            m_Test_JoystickTest = m_Test.FindAction("JoystickTest", throwIfNotFound: true);
            m_Test_Joystick2 = m_Test.FindAction("Joystick2", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Test
        private readonly InputActionMap m_Test;
        private ITestActions m_TestActionsCallbackInterface;
        private readonly InputAction m_Test_ButtonTest;
        private readonly InputAction m_Test_JoystickTest;
        private readonly InputAction m_Test_Joystick2;
        public struct TestActions
        {
            private @Controls m_Wrapper;
            public TestActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @ButtonTest => m_Wrapper.m_Test_ButtonTest;
            public InputAction @JoystickTest => m_Wrapper.m_Test_JoystickTest;
            public InputAction @Joystick2 => m_Wrapper.m_Test_Joystick2;
            public InputActionMap Get() { return m_Wrapper.m_Test; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TestActions set) { return set.Get(); }
            public void SetCallbacks(ITestActions instance)
            {
                if (m_Wrapper.m_TestActionsCallbackInterface != null)
                {
                    @ButtonTest.started -= m_Wrapper.m_TestActionsCallbackInterface.OnButtonTest;
                    @ButtonTest.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnButtonTest;
                    @ButtonTest.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnButtonTest;
                    @JoystickTest.started -= m_Wrapper.m_TestActionsCallbackInterface.OnJoystickTest;
                    @JoystickTest.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnJoystickTest;
                    @JoystickTest.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnJoystickTest;
                    @Joystick2.started -= m_Wrapper.m_TestActionsCallbackInterface.OnJoystick2;
                    @Joystick2.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnJoystick2;
                    @Joystick2.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnJoystick2;
                }
                m_Wrapper.m_TestActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @ButtonTest.started += instance.OnButtonTest;
                    @ButtonTest.performed += instance.OnButtonTest;
                    @ButtonTest.canceled += instance.OnButtonTest;
                    @JoystickTest.started += instance.OnJoystickTest;
                    @JoystickTest.performed += instance.OnJoystickTest;
                    @JoystickTest.canceled += instance.OnJoystickTest;
                    @Joystick2.started += instance.OnJoystick2;
                    @Joystick2.performed += instance.OnJoystick2;
                    @Joystick2.canceled += instance.OnJoystick2;
                }
            }
        }
        public TestActions @Test => new TestActions(this);
        public interface ITestActions
        {
            void OnButtonTest(InputAction.CallbackContext context);
            void OnJoystickTest(InputAction.CallbackContext context);
            void OnJoystick2(InputAction.CallbackContext context);
        }
    }
}
